task wrapper (type: Wrapper) {
	gradleVersion = '1.0-rc-1'
}

defaultTasks 'clean', 'run'

task clean (type: Delete) {
	description = "Cleanup"
	delete (new File (buildDir, 'war1'))
	delete (new File (buildDir, 'war2'))
}

task run << {
	description = "Explodes the web archives (and their jars) and launches jmeld on them"

	if (!project.hasProperty('nogui')) {
		ant.java(jar:"lib${File.separator}JMeld-2.1.jar",fork:true) {
			arg (value: new File (buildDir, 'war1').path)
			arg (value: new File (buildDir, 'war2').path)
		}
	}
}

tasks.whenTaskAdded { task ->
	if (task.name.startsWith("explode")) {
		run.dependsOn task
	}
}

['war1', 'war2'].each { def warName ->

	if (project.hasProperty (warName)) {
		tasks.add (name: "explode${warName}", type: Copy) {
			description = "Explodes war ${warName}"
			group = 'build'
		
			destinationDir = buildDir

			def actualWar = project."${warName}"
			logger.info "Inflating ${actualWar}"
			into (warName) {
				from zipTree (actualWar)
			}
		}

		if (!project.hasProperty('nojars')) {
			tasks.add (name: "explode${warName}Jars"/*, type: Copy*/) {
				description = "Explodes jars from ${warName}"
				group = 'build'
				dependsOn "explode${warName}"

				def tree = fileTree(new File (buildDir, warName)).matching { include '**/*.jar' }

				// JAR detection
				def jarFiles = [] as HashSet
				def wardir = warName
				logger.debug "Detecting jars for ${tree}"
				tree.each {File file ->
					logger.debug "Adding ${file} to jarFiles for ${wardir}"
					jarFiles << file
				}

				doLast {
					logger.debug "Processing ${jarFiles}"
					jarFiles.each {File file ->
						def inflated = new File (file.parent, "${file.name}.inflated")
						inflated.mkdirs ()
						logger.debug "Inflating ${file} into ${inflated}"
						copy {
							from zipTree (file)
							into inflated
						}
					}
				}
			}
		}
	}
}



